import 'package:flappy_translator/src/services/code_generation/code_generator.dart';
import 'package:test/test.dart';

import '../../testing_utils.dart';

void main() {
  test('Parameter className null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: null,
        dependOnContext: false,
        useSingleQuotes: true,
        replaceNoBreakSpaces: false,
        exposeGetString: false,
        exposeLocaStrings: false,
        exposeLocaleMaps: false,
      ),
      throwsAssertionError,
    );
  });

  test('Parameter dependOnContext null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: 'className',
        dependOnContext: null,
        useSingleQuotes: true,
        replaceNoBreakSpaces: false,
        exposeGetString: false,
        exposeLocaStrings: false,
        exposeLocaleMaps: false,
      ),
      throwsAssertionError,
    );
  });

  test('Parameter useSingleQuotes null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: 'className',
        dependOnContext: false,
        useSingleQuotes: null,
        replaceNoBreakSpaces: false,
        exposeGetString: false,
        exposeLocaStrings: false,
        exposeLocaleMaps: false,
      ),
      throwsAssertionError,
    );
  });

  test('Parameter replaceNoBreakSpaces null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: 'className',
        dependOnContext: false,
        useSingleQuotes: true,
        replaceNoBreakSpaces: null,
        exposeGetString: false,
        exposeLocaStrings: false,
        exposeLocaleMaps: false,
      ),
      throwsAssertionError,
    );
  });

  test('Parameter exposeGetString null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: 'className',
        dependOnContext: false,
        useSingleQuotes: true,
        replaceNoBreakSpaces: false,
        exposeGetString: null,
        exposeLocaStrings: false,
        exposeLocaleMaps: false,
      ),
      throwsAssertionError,
    );
  });

  test('Parameter exposeLocaStrings null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: 'className',
        dependOnContext: false,
        useSingleQuotes: true,
        replaceNoBreakSpaces: false,
        exposeGetString: false,
        exposeLocaStrings: null,
        exposeLocaleMaps: false,
      ),
      throwsAssertionError,
    );
  });

  test('Parameter exposeLocaleMaps null triggers assertion', () {
    expect(
      () => CodeGenerator(
        className: 'className',
        dependOnContext: false,
        useSingleQuotes: true,
        replaceNoBreakSpaces: false,
        exposeGetString: false,
        exposeLocaStrings: false,
        exposeLocaleMaps: null,
      ),
      throwsAssertionError,
    );
  });

  test('formattedString', () {
    final codeGenerator = CodeGenerator(
      className: 'I18n',
      dependOnContext: false,
      useSingleQuotes: true,
    );

    expect(
      codeGenerator.formattedString,
      '''
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes

import 'dart:async';

import 'package:flutter/material.dart';

/// A  class generated by flappy_translator package containing localized strings
class I18n {
  /// Fields area

  static Map<String, String> _localizedValues;

  /// Values area

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** \$key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  /// SupportedLanguages area

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
''',
    );
  });

  test('formattedString', () {
    final codeGenerator = CodeGenerator(
      className: 'I18n',
      dependOnContext: false,
      useSingleQuotes: true,
    );
    codeGenerator.setSupportedLanguages(['en_US', 'de']);

    expect(
      codeGenerator.formattedString,
      '''
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes

import 'dart:async';

import 'package:flutter/material.dart';

/// A  class generated by flappy_translator package containing localized strings
class I18n {
  /// Fields area

  static Map<String, String> _localizedValues;

  /// Values area

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** \$key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en', 'US'),
    Locale('de'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
''',
    );
  });

  test('finalize', () {
    final codeGenerator = CodeGenerator(
      className: 'I18n',
      dependOnContext: false,
      useSingleQuotes: true,
      replaceNoBreakSpaces: true,
    );
    codeGenerator.setSupportedLanguages(['en_US', 'de']);
    codeGenerator.addField('test', 'Hello, World!', ['Hello, World!', 'Hallo, Welt!']);
    codeGenerator.addField('test', 'Hello %name\$s!', ['Hello %name\$s!', 'Hallo %name\$s!']);
    codeGenerator.finalize();

    expect(
      codeGenerator.formattedString,
      '''
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes

import 'dart:async';

import 'package:flutter/material.dart';

/// A  class generated by flappy_translator package containing localized strings
class I18n {
  static String get test => _getText('test');

  static String test({
    @required String name,
  }) {
    var _text = _getText('test');
    if (name != null) {
      _text = _text.replaceAll('%name\\\$s', name);
    }
    return _text;
  }

  static Map<String, String> _localizedValues;

  static const _enUSValues = {
    'test': 'Hello %name\\\$s!',
  };

  static const _deValues = {
    'test': 'Hallo %name\\\$s!',
  };

  static const _allValues = {
    'en_US': _enUSValues,
    'de': _deValues,
  };

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** \$key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en', 'US'),
    Locale('de'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
''',
    );
  });
}
